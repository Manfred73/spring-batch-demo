<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>nl.craftsmen</groupId>
    <artifactId>contactsprocessor</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>spring-batch-demo</name>
    <description>contactsprocessor</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <skipUnitTests>false</skipUnitTests>

        <!-- Java version and jdk properties -->
        <java.version>11</java.version>
        <version.java.compiler>${java.version}</version.java.compiler>
        <version.java.source>${java.version}</version.java.source>
        <version.java.target>${java.version}</version.java.target>

        <!-- Spring versions -->
        <spring-boot.version>2.6.7</spring-boot.version>

        <!-- Other dependency versions -->
        <version.maven-compiler-plugin>3.8.1</version.maven-compiler-plugin>
        <version.restrict-imports-enforcer-rule>1.3.0</version.restrict-imports-enforcer-rule>

        <!-- Spring versions -->
        <spring-cloud.version>3.1.0</spring-cloud.version>

        <!-- Other dependency versions -->
        <!-- Newer version of lombok  than the one that comes with spring-dependencies: this version contains @StandarException -->
        <version.lombok>1.18.22</version.lombok>
        <version.commons-collections4>4.4</version.commons-collections4>
        <version.slf4j-mock>2.2.0</version.slf4j-mock>
        <!-- FIXME: De huidige versie van Spring Boot (2.6.7) komt met Logback versie 1.2.11
               Deze zorgt voor NullPointerException errors in oaa-borgenbericht -->
        <version.logback>1.2.10</version.logback>

        <!-- Test dependencies versions -->
        <version.pitest>1.7.1</version.pitest>
        <version.pitest-junit5>0.15</version.pitest-junit5>
        <version.surefire.plugin>2.22.2</version.surefire.plugin>
        <version.failsafe.plugin>2.22.2</version.failsafe.plugin>
        <version.jacoco.plugin>0.8.8</version.jacoco.plugin>

        <!--  Test versions -->
        <version.equalsverifier>3.7.2</version.equalsverifier>
        <version.reactor-test>3.4.12</version.reactor-test>
        <version.fest-reflect>1.4.1</version.fest-reflect>
        <testcontainers.version>1.17.2</testcontainers.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--
                This could be set as a parent, but if you already have another parent, like a company parent pom,
                you can define the spring-boot-dependencies as an import.
            -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>testcontainers-bom</artifactId>
                <version>${testcontainers.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-batch</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-integration</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring security for API key authorisation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Other dependencies -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${version.commons-collections4}</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Necessary for Spring Batch. -->
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
        </dependency>

        <!--
            FIXME: Version 2.6.7 of Spring Boot comes with Logback version 1.2.11 which can cause NullPointerException
                errors. Therefore use version 1.2.10 of Logback.
        -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-access</artifactId>
            <version>${version.logback}</version>
            <exclusions>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${version.logback}</version>
            <exclusions>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${version.logback}</version>
        </dependency>

        <!-- Test: Spring -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Test: Spring Cloud -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-contract-wiremock</artifactId>
            <version>${spring-cloud.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Test: junit -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Test hamcrest matchers library -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Test: assertj matchers -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Test: Pitest -->
        <dependency>
            <groupId>org.pitest</groupId>
            <artifactId>pitest-parent</artifactId>
            <version>${version.pitest}</version>
            <type>pom</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.pitest</groupId>
            <artifactId>pitest-junit5-plugin</artifactId>
            <version>${version.pitest-junit5}</version>
            <scope>test</scope>
        </dependency>

        <!-- Test: mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Test: Other test dependencies -->
        <dependency>
            <groupId>nl.jqno.equalsverifier</groupId>
            <artifactId>equalsverifier</artifactId>
            <version>${version.equalsverifier}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <version>${version.reactor-test}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.easytesting</groupId>
            <artifactId>fest-reflect</artifactId>
            <version>${version.fest-reflect}</version>
            <scope>test</scope>
        </dependency>

        <!--
            See:
            - https://fullstackcode.dev/2021/05/16/springboot-integration-testing-with-testcontainers/
            - https://www.testcontainers.org/quickstart/junit_5_quickstart/
        -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>contactsprocessor</finalName>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${version.maven-compiler-plugin}</version>
                <configuration>
                    <source>${version.java.source}</source>
                    <target>${version.java.target}</target>
                </configuration>
            </plugin>

            <!-- Always run unittests -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${version.surefire.plugin}</version>
                <configuration>
                    <skip>${skipUnitTests}</skip>
                    <argLine>-Xms512m -Xmx1024m -ea -Dfile.encoding=UTF-8</argLine>
                    <includes>
                        <include>**/Test*.java</include>
                        <include>**/*Test.java</include>
                        <include>**/*TestCase.java</include>
                        <include>**/*TestSuite.java</include>
                        <include>**/AllTests.java</include>
                    </includes>
                    <excludes>
                        <exclude>**/integration/*.java</exclude>
                        <exclude>**/*IntegrationTest.java</exclude>
                        <exclude>**/*IgnoreAutoTest.java</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${version.jacoco.plugin}</version>
                <executions>
                    <execution>
                        <id>pre-unit-test</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <propertyName>JacocoSurefireArgLineOption</propertyName>
                            <includes/>
                        </configuration>
                    </execution>
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>pre-integrationtest</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <propertyName>JacocoFailSafeArgLineOption</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>post-integration-test</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- Exclude classes with which have static methods and call some Spring helper functions.
                        We don't want to test Spring here.
                    -->
                    <excludes>
                        <exclude>nl.craftsmen.util.SpringJdbcScriptUtils</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-maven</artifactId>
                <version>${version.pitest}</version>
                <configuration>
                    <testPlugin>junit5</testPlugin>
                    <targetClasses>
                        <param>nl.craftsmen.*</param>
                    </targetClasses>
                    <targetTests>
                        <param>nl.craftsmen.*</param>
                    </targetTests>
                    <!-- Options for aggregate reports. -->
                    <timestampedReports>false</timestampedReports>
                    <exportLineCoverage>true</exportLineCoverage>
                    <outputFormats>
                        <param>XML</param>
                        <param>HTML</param>
                    </outputFormats>
                    <!-- Thresholds at which the goal fails. -->
                    <mutationThreshold>90</mutationThreshold>
                    <coverageThreshold>90</coverageThreshold>
                    <!--- Optimilisations to make tests faster. -->
                    <threads>4</threads>
                    <mutationUnitSize>4</mutationUnitSize>
                    <maxDependencyDistance>3</maxDependencyDistance>
                    <!-- Exclude classes with which have static methods and call some Spring helper functions.
                         We don't want to test Spring here.
                    -->
                    <excludedClasses>
                        <excludedClass>nl.craftsmen.util.SpringJdbcScriptUtils</excludedClass>
                    </excludedClasses>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-junit5-plugin</artifactId>
                        <version>${version.pitest-junit5}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>de.skuzzle.enforcer</groupId>
                        <artifactId>restrict-imports-enforcer-rule</artifactId>
                        <version>${version.restrict-imports-enforcer-rule}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>check-junit4-imports</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <rules>
                        <dependencyConvergence/> <!-- Check for version conflicts. -->
                    </rules>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <profiles>
        <profile>
            <id>integration-tests</id>
            <properties>
                <skipUnitTests>true</skipUnitTests>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${version.failsafe.plugin}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <!-- useModulePath and additionalClasspathElements added to fix IT test issues.
                            See https://github.com/spring-projects/spring-boot/issues/25473#issuecomment-789031067
                            -->
                            <useModulePath>false</useModulePath>
                            <additionalClasspathElements>
                                <additionalClasspathElement>${basedir}/target/classes</additionalClasspathElement>
                            </additionalClasspathElements>
                            <argLine>-Xms512m -Xmx1024m -ea -Dfile.encoding=UTF-8</argLine>
                            <includes>
                                <include>**/*IT.java</include>
                                <include>**/IT*.java</include>
                                <include>**/*ITCase.java</include>
                                <include>**/integration/*.java</include>
                                <include>**/*IntegrationTest.java</include>
                            </includes>
                            <excludes>
                                <exclude>**/*IgnoreAutoTest.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
